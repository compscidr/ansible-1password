---
- name: Verify
  hosts: all
  gather_facts: false
  tasks:
    - name: Check if 1password package is installed
      ansible.builtin.command:
        cmd: dpkg -l 1password
      register: onepassword_package_check
      changed_when: false
      failed_when: onepassword_package_check.rc != 0

    - name: Check if 1password-cli package is installed
      ansible.builtin.command:
        cmd: dpkg -l 1password-cli
      register: onepassword_cli_package_check
      changed_when: false
      failed_when: onepassword_cli_package_check.rc != 0

    - name: Verify 1password package installation
      ansible.builtin.debug:
        msg: "1Password package is correctly installed"
      when: onepassword_package_check.rc == 0

    - name: Verify 1password-cli package installation
      ansible.builtin.debug:
        msg: "1Password CLI package is correctly installed"
      when: onepassword_cli_package_check.rc == 0

    - name: Check if op command is available
      ansible.builtin.command:
        cmd: which op
      register: op_command_check
      changed_when: false
      failed_when: op_command_check.rc != 0

    - name: Verify op command is available
      ansible.builtin.debug:
        msg: "1Password CLI (op) command is available at {{ op_command_check.stdout }}"
      when: op_command_check.rc == 0

    - name: Check if browser support exists
      ansible.builtin.stat:
        path: /opt/1Password/1Password-BrowserSupport
      register: browser_support_check

    - name: Verify browser support installation
      ansible.builtin.debug:
        msg: "1Password browser support is installed for Chrome and Firefox extensions"
      when: browser_support_check.stat.exists

    - name: Fail if browser support is not installed
      ansible.builtin.fail:
        msg: "1Password browser support is not installed"
      when: not browser_support_check.stat.exists

    - name: Check if Chrome policy file exists
      ansible.builtin.stat:
        path: /etc/opt/chrome/policies/managed/1password.json
      register: chrome_policy_check

    - name: Verify Chrome extension policy is installed
      ansible.builtin.debug:
        msg: "Chrome extension policy file is installed"
      when: chrome_policy_check.stat.exists

    - name: Fail if Chrome policy is not installed
      ansible.builtin.fail:
        msg: "Chrome extension policy file is not installed"
      when: not chrome_policy_check.stat.exists

    - name: Read Chrome policy file
      ansible.builtin.slurp:
        src: /etc/opt/chrome/policies/managed/1password.json
      register: chrome_policy_content

    - name: Parse Chrome policy JSON
      ansible.builtin.set_fact:
        chrome_policy_json: "{{ chrome_policy_content['content'] | b64decode | from_json }}"

    - name: Verify Chrome policy has correct structure
      ansible.builtin.assert:
        that:
          - chrome_policy_json.ExtensionSettings is defined
          - chrome_policy_json.ExtensionSettings['aeblfdkhhhdcdjpifhhbdiojplfjncoa'] is defined
          - chrome_policy_json.ExtensionSettings['aeblfdkhhhdcdjpifhhbdiojplfjncoa'].installation_mode == 'normal_installed'
          - chrome_policy_json.ExtensionSettings['aeblfdkhhhdcdjpifhhbdiojplfjncoa'].update_url is defined
        fail_msg: "Chrome policy does not have correct structure for 1Password extension"
        success_msg: "Chrome policy correctly configured for 1Password extension auto-installation"

    - name: Check if Firefox policy file exists
      ansible.builtin.stat:
        path: /etc/firefox/policies/policies.json
      register: firefox_policy_check

    - name: Verify Firefox extension policy is installed
      ansible.builtin.debug:
        msg: "Firefox extension policy file is installed"
      when: firefox_policy_check.stat.exists

    - name: Fail if Firefox policy is not installed
      ansible.builtin.fail:
        msg: "Firefox extension policy file is not installed"
      when: not firefox_policy_check.stat.exists

    - name: Read Firefox policy file
      ansible.builtin.slurp:
        src: /etc/firefox/policies/policies.json
      register: firefox_policy_content

    - name: Parse Firefox policy JSON
      ansible.builtin.set_fact:
        firefox_policy_json: "{{ firefox_policy_content['content'] | b64decode | from_json }}"

    - name: Verify Firefox policy has correct structure
      ansible.builtin.assert:
        that:
          - firefox_policy_json.policies is defined
          - firefox_policy_json.policies.ExtensionSettings is defined
          - firefox_policy_json.policies.ExtensionSettings['{d634138d-c276-4fc8-924b-40a0ea21d284}'] is defined
          - firefox_policy_json.policies.ExtensionSettings['{d634138d-c276-4fc8-924b-40a0ea21d284}'].installation_mode == 'normal_installed'
          - firefox_policy_json.policies.ExtensionSettings['{d634138d-c276-4fc8-924b-40a0ea21d284}'].install_url is defined
        fail_msg: "Firefox policy does not have correct structure for 1Password extension"
        success_msg: "Firefox policy correctly configured for 1Password extension auto-installation"

    - name: Display verification summary
      ansible.builtin.debug:
        msg: |
          ========================================
          1Password Browser Extension Verification
          ========================================
          
          ✓ Chrome Policy Configuration:
            - Policy file created: {{ chrome_policy_check.stat.exists }}
            - Extension ID: aeblfdkhhhdcdjpifhhbdiojplfjncoa
            - Installation mode: normal_installed (user can uninstall)
            - Update URL: {{ chrome_policy_json.ExtensionSettings['aeblfdkhhhdcdjpifhhbdiojplfjncoa'].update_url }}
          
          ✓ Firefox Policy Configuration:
            - Policy file created: {{ firefox_policy_check.stat.exists }}
            - Extension ID: {d634138d-c276-4fc8-924b-40a0ea21d284}
            - Installation mode: normal_installed (user can uninstall)
            - Install URL: {{ firefox_policy_json.policies.ExtensionSettings['{d634138d-c276-4fc8-924b-40a0ea21d284}'].install_url }}
          
          Note: Extensions will be automatically installed when users launch 
          Chrome or Firefox. The policies are configured correctly and will 
          trigger automatic extension installation on first browser launch.
